// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// geo_to_h3
CharacterVector geo_to_h3(NumericMatrix latlng, int res);
RcppExport SEXP _h3_geo_to_h3(SEXP latlngSEXP, SEXP resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type latlng(latlngSEXP);
    Rcpp::traits::input_parameter< int >::type res(resSEXP);
    rcpp_result_gen = Rcpp::wrap(geo_to_h3(latlng, res));
    return rcpp_result_gen;
END_RCPP
}
// num_hexagons
NumericVector num_hexagons(NumericVector res);
RcppExport SEXP _h3_num_hexagons(SEXP resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type res(resSEXP);
    rcpp_result_gen = Rcpp::wrap(num_hexagons(res));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_h3_geo_to_h3", (DL_FUNC) &_h3_geo_to_h3, 2},
    {"_h3_num_hexagons", (DL_FUNC) &_h3_num_hexagons, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_h3(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
